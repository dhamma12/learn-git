Git and GitHub 1 - Introduction
=======================

Today we will learn
———————————

1. What is GIT
2. What is GIT HUB
3. Is GIT related to GIT HUB
4. A simple workflow


GIT - VCS - version control system
 - to track changes in files / folders
        - to collaborate in teams
 - free and open source

Centralised VCS    |    Distributed VCS

GIT = DVCS

——————————————————

GIT HUB - website to upload your repositories online
  - provides backup 
  - provides visual interface to your repo
  - makes collaboration easier

GIT  !=  GIT HUB


_______________________________________________ .


Git and GitHub Beginner Tutorial 3 - Getting started - Install Git (windows)
========================================================

Today we will learn
———————————

1. How to install Git on windows
2. Adding project/files to git for tracking
3. Git commands
4. Pushing project to remote repository(github)
_______________________________

Step 1 : check if git is already installed
             git --version

Step 2 : download and install git

Step 3 : add your project to git

Step 4 : commands

   git config --global user.email "yourGitHub@email.com"
   git config --global user.name "yourGitHubusername"

  - git init
  - git status
  - git add
  - git commit -m “…..”
  - git remote add origin https://github.com/RaghavAutomation/R...
  - git push -u origin master
  - git log
  - git —help

Step 5 : adding project to remote repository (github)


Git and GitHub Beginner Tutorial 5 - Branching and Merging
================================================

Today we will learn
———————————
1. What are branches
2. How to create branch
3. How to checkout branch
4. How to merge branch to master
5. How to delete branch (local and remote)
_________________________________________

Step 1 : Create branch 
   git branch “branch name”

Step 2 : Checkout branch
   git checkout “branch name”

Step 3 : Merge new branch in master branch
   git merge “branch name”

Step 4 : Delete branch
   git branch -d “branch name”    — delete from local
   git push origin —delete “branch name”   — delete from remote


email services are replaced and new options introduced. The new option is Github - Repository - Settings - Notification - add your email-ID
Today we will learn
How to trigger notification email from github 
whenever there is any change/commit in the project

Step 1 : Github - Repository - Settings - integration & services - add email 

Step 2 : Test and validate by making some change in the project


---------------------------------------------------

Git TAGS - What | Why | When | How
============================

Today We will learn:
-------------------------------
1. What are tags / releases
2. Why should i create TAGs
3. When to create TAGs
4. How to create TAGs in git
     create | show | publish | delete

Step 1:
Checkout the branch where you want to create the tag
git checkout "branch name"
example : git checkout master
________________________________________________________

Step 2:
Create tag with some name
git tag "tag name"
example : git tag v1.0
git tag -a v1.0 -m "ver 1 of .."  (to create annotated tags) 
________________________________________________________

Step 3:
Display or Show tags
git tag
git show v1.0
git tag -l “v1.*”
________________________________________________________

Step 4:
Push tags to remote
git push origin v1.0
git push origin --tags
git push --tags 
(to push all tags at once)
________________________________________________________

Step 5:
Delete tags (if required only)
to delete tags from local :
git tag -d v1.0
git tag --delete v1.0

to delete tags from remote :
git push origin -d v1.0
git push origin --delete v1.0
git push origin :v1.0

to delete multiple tags at once:
git tag -d v1.0 v1.1 (local)
git push origin -d v1.0 v1.1 (remote)

________________________________________________________


Checking out TAGS

We cannot checkout tags in git
We can create a branch from a tag and checkout the branch
git checkout -b "branch name" "tag name"
example : git checkout -b ReleaseVer1 v1.0
________________________________________________________

Creating TAGS from past commits

git tag "tag name" "reference of commit"
example : git tag  v1.2 5fcdb03


----------------------------------------------------------

In Git there are 2 ways to integrate changes from one branch to another
git merge
git rebase

git merge
- Is a non-destructive operation
- Existing branches are not changed in any way
- Creates a new merge commit in the feature branch

git rebase
- Moves the entire feature branch to begin on the tip of the master branch
- Re-writes the project history
- We get much cleaner and linear project history